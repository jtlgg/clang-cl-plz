#!/usr/bin/env bash -e

WINDOWS_TOOLCHAIN_DIR="$HOME/Projects/msvc-toolchain/"
WINSDK_VER="10.0.20348.0"
LINUX_SYSROOT="--sysroot=$HOME/Projects/linux-toolchain/"
MACOS_SYSROOT="-isysroot $(xcrun --show-sdk-path --sdk macosx)"

MSVC_BASE="${WINDOWS_TOOLCHAIN_DIR}/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133"
MSVC_INCLUDE="${MSVC_BASE}/include"
MSVC_LIB="${MSVC_BASE}/lib"

WINSDK_BASE="${WINDOWS_TOOLCHAIN_DIR}/Windows Kits/10"
WINSDK_INCLUDE="${WINSDK_BASE}/Include/${WINSDK_VER}"
WINSDK_LIB="${WINSDK_BASE}/lib/${WINSDK_VER}"

COMPILE_FLAGS="$COMPILE_FLAGS /nologo -TP"
COMPILE_FLAGS="$COMPILE_FLAGS -fuse-ld=lld-link"
COMPILE_FLAGS="$COMPILE_FLAGS -m64"
COMPILE_FLAGS="$COMPILE_FLAGS -Werror -Wall"
COMPILE_FLAGS="$COMPILE_FLAGS -D_CRT_SECURE_NO_WARNINGS"
COMPILE_FLAGS="$COMPILE_FLAGS -fms-compatibility-version=19"
COMPILE_FLAGS="$COMPILE_FLAGS -fms-extensions"
COMPILE_FLAGS="$COMPILE_FLAGS -fdelayed-template-parsing"
COMPILE_FLAGS="$COMPILE_FLAGS -Wno-msvc-not-found"
COMPILE_FLAGS="$COMPILE_FLAGS -DWIN32"
COMPILE_FLAGS="$COMPILE_FLAGS -D_WIN32"
COMPILE_FLAGS="$COMPILE_FLAGS -D_MT"
COMPILE_FLAGS="$COMPILE_FLAGS -D_DLL"
COMPILE_FLAGS="$COMPILE_FLAGS -Xclang -disable-llvm-verifier"
COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=msvcrt'"
COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=ucrt'"
COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=oldnames'"
COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=vcruntime'"
COMPILE_FLAGS="$COMPILE_FLAGS -D_CRT_SECURE_NO_WARNINGS"
COMPILE_FLAGS="$COMPILE_FLAGS -D_CRT_NONSTDC_NO_DEPRECATE"
COMPILE_FLAGS="$COMPILE_FLAGS -U__GNUC__"
COMPILE_FLAGS="$COMPILE_FLAGS -U__gnu_linux__"
COMPILE_FLAGS="$COMPILE_FLAGS -U__GNUC_MINOR__"
COMPILE_FLAGS="$COMPILE_FLAGS -U__GNUC_PATCHLEVEL__"
COMPILE_FLAGS="$COMPILE_FLAGS -U__GNUC_STDC_INLINE__ "
COMPILE_FLAGS="$COMPILE_FLAGS -imsvc '${MSVC_INCLUDE}'"
COMPILE_FLAGS="$COMPILE_FLAGS -imsvc '${WINSDK_INCLUDE}/ucrt'"
COMPILE_FLAGS="$COMPILE_FLAGS -imsvc '${WINSDK_INCLUDE}/shared'"
COMPILE_FLAGS="$COMPILE_FLAGS -imsvc '${WINSDK_INCLUDE}/um'"
COMPILE_FLAGS="$COMPILE_FLAGS -imsvc '${WINSDK_INCLUDE}/winrt'"
COMPILE_FLAGS="$COMPILE_FLAGS -Wno-error=unknown-argument"
COMPILE_FLAGS="$COMPILE_FLAGS -Wno-error=unused-command-line-argument"
COMPILE_FLAGS="$COMPILE_FLAGS -Wno-error=c++98-compat"
COMPILE_FLAGS="$COMPILE_FLAGS -Wno-error=c++98-compat-pedantic"
#COMPILE_FLAGS="$COMPILE_FLAGS /Zi /Ob0 /Od /RTC1 -MDd"

LINK_FLAGS=""
LINK_FLAGS="$LINK_FLAGS -libpath:'${MSVC_LIB}/x64'"
LINK_FLAGS="$LINK_FLAGS -libpath:'${WINSDK_LIB}/ucrt/x64'"
LINK_FLAGS="$LINK_FLAGS -libpath:'${WINSDK_LIB}/um/x64'"
#COMPILE_FLAGS="$COMPILE_FLAGS -Xclang -disable-llvm-verifier"
#COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=msvcrt'"
#COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=ucrt'"
#COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=oldnames'"
#COMPILE_FLAGS="$COMPILE_FLAGS -Xclang '--dependent-lib=vcruntime'"
NO_ERROR="-Wno-error=c++98-compat -Wno-error=unused-parameter"

echo "; generated by $0
[cpp]
cctool=clang-cl
cpptool=clang-cl
ldtool=lld-link
defaultoptcflags=/std:c++20  /Zi /RTC1 -MDd -DNDEBUG $COMPILE_FLAGS $NO_ERROR
defaultdbgcflags=/std:c++20  /Zi  /RTC1 -MDd -DDEBUG $COMPILE_FLAGS $NO_ERROR
defaultoptcppflags=/std:c++20  /Zi /RTC1 -MDd -DNDEBUG $COMPILE_FLAGS $NO_ERROR
defaultdbgcppflags=/std:c++20  /Zi /RTC1 -MDd -DNDEBUG $COMPILE_FLAGS $NO_ERROR
defaultldflags=-fuse-ld=lld-link /link $LINK_FLAGS
" > .plzconfig_windows_amd64

echo "; generated by $0
[cpp]
cctool=clang
cpptool=clang++
ldtool=lld
defaultoptcflags = -target x86_64-pc-linux-gnu -m64 --std=c11 -O3 -pipe -DNDEBUG -Wall -Werror $LINUX_SYSROOT
defaultdbgcflags = -target x86_64-pc-linux-gnu -m64 --std=c11 -g3 -pipe -DDEBUG -Wall -Werror $LINUX_SYSROOT
defaultoptcppflags = -target x86_64-pc-linux-gnu -m64 --std=c++20 -O3 -pipe -DNDEBUG -Wall -Werror $LINUX_SYSROOT
defaultdbgcppflags = -target x86_64-pc-linux-gnu -m64 --std=c++20 -g3 -pipe -DDEBUG -Wall -Werror $LINUX_SYSROOT
" > .plzconfig_linux_amd64

echo "; generated by $0
[cpp]
cctool=clang
cpptool=clang++
ldtool=ld64.lld
defaultoptcflags = -m64 --std=c11 -O3 -pipe -DNDEBUG -Wall -Werror $MACOS_SYSROOT
defaultdbgcflags = -m64 --std=c11 -g3 -pipe -DDEBUG -Wall -Werror $MACOS_SYSROOT
defaultoptcppflags = -m64 --std=c++20 -O3 -pipe -DNDEBUG -Wall -Werror $MACOS_SYSROOT
defaultdbgcppflags = -m64 --std=c++20 -g3 -pipe -DDEBUG -Wall -Werror $MACOS_SYSROOT
" > .plzconfig_darwin_amd64

if [ -e .plzconfig.local ]; then
sed -i '' "s/^nonce=.*$/nonce=$(cat .plzconfig_*|md5)/" .plzconfig.local
else
echo "; generated by $0
[build]
; cat .plzconfig_*|md5
nonce=$(cat .plzconfig_*|md5)
" > .plzconfig.local
fi
